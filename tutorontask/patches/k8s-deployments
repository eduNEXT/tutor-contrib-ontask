{% if RUN_ONTASK %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ontask
  labels:
    app.kubernetes.io/name: ontask
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ontask
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ontask
    spec:
      containers:
        - name: ontask
          env:
            - name: ENV_FILENAME
              value: "/app/ontask/docker.env"
            - name: C_FORCE_ROOT
              value: "true"
          image: {{ ONTASK_DOCKER_IMAGE }}
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: docker-env
              mountPath: /app/ontask/docker.env
              subPath: docker.env
            - name: base-settings
              mountPath: /app/ontask/settings/base.py
              subPath: base.py
            - name: production-settings
              mountPath: /app/ontask/settings/production.py
              subPath: production.py
      restartPolicy: Always
      volumes:
        - name: docker-env
          configMap:
            name: ontask-env
        - name: base-settings
          configMap:
            name: ontask-settings
        - name: production-settings
          configMap:
            name: ontask-settings

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ontask-worker
  labels:
    app.kubernetes.io/name: ontask-worker
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ontask-worker
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ontask-worker
    spec:
      containers:
        - name: ontask-worker
          env:
            - name: ENV_FILENAME
              value: "/app/ontask/docker.env"
            - name: C_FORCE_ROOT
              value: "true"
          image: {{ ONTASK_DOCKER_IMAGE }}
          volumeMounts:
            - name: docker-env
              mountPath: /app/ontask/docker.env
              subPath: docker.env
            - name: base-settings
              mountPath: /app/ontask/settings/base.py
              subPath: base.py
            - name: production-settings
              mountPath: /app/ontask/settings/production.py
              subPath: production.py
            - name: supervisor
              mountPath: /app/ontask/supervisor/supervisor.conf
              subPath: supervisor.conf
          command: ["supervisord"]
          args: ["-n", "-c", "/app/ontask/supervisor/supervisor.conf"]
      restartPolicy: Always
      volumes:
        - name: docker-env
          configMap:
            name: ontask-env
        - name: base-settings
          configMap:
            name: ontask-settings
        - name: production-settings
          configMap:
            name: ontask-settings
        - name: supervisor
          configMap:
            name: ontask-supervisor
{% endif %}

{% if RUN_POSTGRES %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app.kubernetes.io/name: postgres
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
    spec:
      containers:
        - name: postgres
          env:
            - name: POSTGRES_PASSWORD
              value: {{ ONTASK_POSTGRES_ROOT_PASSWORD }}
          image: {{ ONTASK_POSTGRES_DOCKER_IMAGE }}
          volumeMounts:
            - mountPath: /var/lib/postgresql
              name: data
      restartPolicy: Always
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: postgres
{% endif %}
