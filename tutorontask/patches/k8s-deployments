{% if RUN_ONTASK %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ontask
  labels:
    app.kubernetes.io/name: ontask
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ontask
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ontask
    spec:
      containers:
        - name: ontask
          env:
            - name: ENV_FILENAME
              value: "/app/ontask/docker.env"
            - name: C_FORCE_ROOT
              value: "true"
          image: {{ ONTASK_DOCKER_IMAGE }}
          ports:
            - containerPort: {{ ONTASK_PORT }}
          volumeMounts:
            - name: docker-env
              mountPath: /app/ontask/docker.env
              subPath: docker.env
            - name: base-settings
              mountPath: /app/ontask/settings/base.py
              subPath: base.py
            - name: production-settings
              mountPath: /app/ontask/settings/production.py
              subPath: production.py
      restartPolicy: Always
      volumes:
        - name: docker-env
          configMap:
            name: ontask-env
        - name: base-settings
          configMap:
            name: ontask-settings
        - name: production-settings
          configMap:
            name: ontask-settings

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ontask-worker
  labels:
    app.kubernetes.io/name: ontask-worker
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ontask-worker
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ontask-worker
    spec:
      containers:
        - name: ontask-worker
          env:
            - name: ENV_FILENAME
              value: "/app/ontask/docker.env"
            - name: C_FORCE_ROOT
              value: "true"
          image: {{ ONTASK_DOCKER_IMAGE }}
          volumeMounts:
            - name: docker-env
              mountPath: /app/ontask/docker.env
              subPath: docker.env
            - name: base-settings
              mountPath: /app/ontask/settings/base.py
              subPath: base.py
            - name: production-settings
              mountPath: /app/ontask/settings/production.py
              subPath: production.py
          args:  ["celery", "--app=ontask", "worker", "--loglevel=info", "--hostname=ontask.default.%%h", "--max-tasks-per-child=100"]
      restartPolicy: Always
      volumes:
        - name: docker-env
          configMap:
            name: ontask-env
        - name: base-settings
          configMap:
            name: ontask-settings
        - name: production-settings
          configMap:
            name: ontask-settings
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ontask-celery-beat
  labels:
    app.kubernetes.io/name: ontask-celery-beat
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ontask-celery-beat
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ontask-celery-beat
    spec:
      containers:
        - name: ontask-celery-beat
          env:
            - name: ENV_FILENAME
              value: "/app/ontask/docker.env"
            - name: C_FORCE_ROOT
              value: "true"
          image: {{ ONTASK_DOCKER_IMAGE }}
          volumeMounts:
            - name: docker-env
              mountPath: /app/ontask/docker.env
              subPath: docker.env
            - name: base-settings
              mountPath: /app/ontask/settings/base.py
              subPath: base.py
            - name: production-settings
              mountPath: /app/ontask/settings/production.py
              subPath: production.py
          args:  ["celery", "--app=ontask", "beat", "--loglevel=info", "--scheduler=django_celery_beat.schedulers:DatabaseScheduler"]
      restartPolicy: Always
      volumes:
        - name: docker-env
          configMap:
            name: ontask-env
        - name: base-settings
          configMap:
            name: ontask-settings
        - name: production-settings
          configMap:
            name: ontask-settings
{% endif %}

{% if RUN_POSTGRES %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app.kubernetes.io/name: postgres
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
    spec:
      containers:
        - name: postgres
          env:
            - name: POSTGRES_PASSWORD
              value: {{ ONTASK_POSTGRES_ROOT_PASSWORD }}
            # Fixes:
            # initdb: error: directory "/var/lib/postgresql/data" exists but is not empty
            # It contains a lost+found directory, perhaps due to it being a mount point.
            # Using a mount point directly as the data directory is not recommended.
            # Create a subdirectory under the mount point.
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          image: {{ ONTASK_POSTGRES_DOCKER_IMAGE }}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: data
      restartPolicy: Always
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: postgres
{% endif %}
